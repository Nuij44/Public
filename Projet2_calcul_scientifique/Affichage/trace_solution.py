import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm

solex = 0   #mettre 1 pour afficher la solution exacte
solapp = 0  #mettre 1 pour afficher la solution approchée
diffsol = 1 ##mettre 1 pour afficher la différence entre la solution approchée et la solution exacte

# On produit une surface en 3D grâce à l'outil np.mesgrid.
x = np.linspace(0, 1,10)
y = np.linspace(0, 1, 10)
x, y = np.meshgrid(x, y)

exacte = [0.998377, 0.849270, 0.617031, 0.324392, 0.000000, -0.324392, -0.617031, -0.849270, -0.998377, -1.049755, 1.145046, 0.974034, 0.707677, 0.372048, 0.000000, -0.372048, -0.707677, -0.974034, -1.145046, -1.203972, 1.405658, 1.195725, 0.868745, 0.456726, 0.000000, -0.456726, -0.868745, -1.195725, -1.405658, -1.477997, 1.806149, 1.536402, 1.116262, 0.586853, 0.000000, -0.586853, -1.116262, -1.536402, -1.806149, -1.899098, 2.386371, 2.029968, 1.474858, 0.775379, 0.000000, -0.775379, -1.474858, -2.029968, -2.386371, -2.509178, 3.204061, 2.725537, 1.980218, 1.041062, 0.000000, -1.041062, -1.980218, -2.725537, -3.204061, -3.368949, 4.340589, 3.692325, 2.682631, 1.410343, 0.000000, -1.410343, -2.682631, -3.692325, -4.340589, -4.563965, 5.909050, 5.026538, 3.651994, 1.919967, 0.000000, -1.919967, -3.651994, -5.026538, -5.909050, -6.213143, 8.065525, 6.860945, 4.984768, 2.620648, 0.000000, -2.620648, -4.984768, -6.860945, -8.065525, -8.480594, 11.024603, 9.378087, 6.813579, 3.582111, 0.000000, -3.582111, -6.813579, -9.378087, -11.024603, -11.591953]
calc = [0.749143, 0.773536, 0.505557, 0.175286, -0.000000, -0.175286, -0.505557, -0.773536, -0.749143, -0.881366, 0.746399, 0.651491, 0.466677, 0.226392, -0.000000, -0.226392, -0.466677, -0.651491, -0.746399, -0.787908, 0.765510, 0.655082, 0.475411, 0.246861, -0.000000, -0.246861, -0.475411, -0.655082, -0.765510, -0.803273, 0.855337, 0.732399, 0.535207, 0.282012, -0.000000, -0.282012, -0.535207, -0.732399, -0.855337, -0.896831, 1.027335, 0.886152, 0.652711, 0.345939, -0.000000, -0.345939, -0.652711, -0.886152, -1.027335, -1.073810, 1.294536, 1.135467, 0.846416, 0.449536, -0.000000, -0.449536, -0.846416, -1.135467, -1.294536, -1.342602, 1.670843, 1.524061, 1.154494, 0.603398, -0.000000, -0.603398, -1.154494, -1.524061, -1.670843, -1.701103, 2.143872, 2.175044, 1.660974, 0.786007, -0.000000, -0.786007, -1.660974, -2.175044, -2.143872, -2.103181, 2.449849, 3.650399, 2.478001, 0.770506, -0.000000, -0.770506, -2.478001, -3.650399, -2.449849, -2.461078, 3.622802, 11.857675, -3.807046, -0.926918, -0.000000, 0.926918, 3.807046, -11.857675, -3.622802, -3.893469]
diff = [0.249233, 0.075733, 0.111474, 0.149106, 0.000000, 0.149106, 0.111474, 0.075733, 0.249233, 0.168390, 0.398646, 0.322543, 0.241000, 0.145655, 0.000000, 0.145655, 0.241000, 0.322543, 0.398646, 0.416064, 0.640148, 0.540642, 0.393334, 0.209865, 0.000000, 0.209865, 0.393334, 0.540642, 0.640148, 0.674724, 0.950812, 0.804003, 0.581055, 0.304842, 0.000000, 0.304842, 0.581055, 0.804003, 0.950812, 1.002266, 1.359035, 1.143817, 0.822147, 0.429440, 0.000000, 0.429440, 0.822147, 1.143817, 1.359035, 1.435369, 1.909525, 1.590070, 1.133803, 0.591526, 0.000000, 0.591526, 1.133803, 1.590070, 1.909525, 2.026347, 2.669745, 2.168264, 1.528137, 0.806944, 0.000000, 0.806944, 1.528137, 2.168264, 2.669745, 2.862862, 3.765179, 2.851494, 1.991020, 1.133960, 0.000000, 1.133960, 1.991020, 2.851494, 3.765179, 4.109963, 5.615675, 3.210546, 2.506768, 1.850142, 0.000000, 1.850142, 2.506768, 3.210546, 5.615675, 6.019517, 7.401801, 2.479588, 10.620626, 4.509029, 0.000000, 4.509029, 10.620626, 2.479588, 7.401801, 7.698484 ]
# Tracé de la surface.
fig = plt.figure(figsize=(7, 7))
axes = plt.axes(projection="3d")
if (solex == 1) :
    axes.scatter(x, y, exacte, label='Solution exacte')
    plt.title('Solution exacte sur Omega')
elif (solapp == 1) :
    axes.scatter(x, y, calc)
    plt.title('Solution approchée sur Omega')
elif (diffsol == 1):
    axes.scatter(x, y, diff)
    plt.title('Différence entre la solution exacte et la solution approchée par la méthode des noyaux itérés')

plt.show()